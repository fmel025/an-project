
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import END, StringVar, Tk, Canvas, Entry, Text, Button, PhotoImage, Radiobutton, CENTER, IntVar, messagebox, Toplevel
import numpy as np
from pylatex import Document, Section, Subsection, Command, Alignat, Figure, Tabu
from pylatex.utils import italic, NoEscape
from gaussQuad import quadIntegrate
import sympy as sp
from utils import generate_pdf


def open_gauss_quad(root):


    OUTPUT_PATH = Path(__file__).parent
    ASSETS_PATH = OUTPUT_PATH / Path("./gauss_assets")


    def relative_to_assets(path: str) -> Path:
        return ASSETS_PATH / Path(path)


    window = Toplevel(root)

    window.geometry("342x623")
    window.configure(bg = "#EDF5FA")

    # Set the window title
    window.title("Cuadratura de Gauss")
    window.grab_set()

    canvas = Canvas(
        window,
        bg = "#EDF5FA",
        height = 623,
        width = 342,
        bd = 0,
        highlightthickness = 0,
        relief = "ridge"
    )

    canvas.place(x = 0, y = 0)
    canvas.create_rectangle(
        0.0,
        0.0,
        342.0,
        63.0,
        fill="#69C5F8",
        outline="")

    canvas.create_text(
        38.0,
        19.0,
        anchor="nw",
        text="Cuadratura Gaussiana",
        fill="#FFFFFF",
        font=("Inter ExtraBold", 24 * -1)
    )

    entry_image_1 = PhotoImage(
        file=relative_to_assets("entry_1.png"))
    entry_bg_1 = canvas.create_image(
        172.0,
        510.5,
        image=entry_image_1
    )
    nodes_value = StringVar(window)
    nodes_input= Entry(
        window,
        bd=0,
        bg="#F3F3F3",
        highlightthickness=0,
        font = "Helvetica 12",
        textvariable=nodes_value
    )
    nodes_input.place(
        x=34.0,
        y=489.0,
        width=276.0,
        height=41.0
    )

    entry_image_2 = PhotoImage(
        file=relative_to_assets("entry_2.png"))
    entry_bg_2 = canvas.create_image(
        273.5,
        426.0,
        image=entry_image_2
    )
    order_var_3 = StringVar(window)
    order_var_3_input = Entry(
        window,
        bd=0,
        bg="#F3F3F3",
        highlightthickness=0,
        justify=CENTER,
        font = "Helvetica 12",
        textvariable=order_var_3
    )
    order_var_3_input.place(
        x=259.0,
        y=408.0,
        width=29.0,
        height=34.0
    )

    entry_image_3 = PhotoImage(
        file=relative_to_assets("entry_3.png"))
    entry_bg_3 = canvas.create_image(
        164.5,
        426.0,
        image=entry_image_3
    )
    order_var_2 = StringVar(window)
    order_var_2_input = Entry(
        window,
        bd=0,
        bg="#F3F3F3",
        highlightthickness=0,
        justify=CENTER,
        font = "Helvetica 12",
        textvariable=order_var_2
    )
    order_var_2_input.place(
        x=150.0,
        y=408.0,
        width=29.0,
        height=34.0
    )

    entry_image_4 = PhotoImage(
        file=relative_to_assets("entry_4.png"))
    entry_bg_4 = canvas.create_image(
        59.5,
        426.0,
        image=entry_image_4
    )
    order_var_1 = StringVar(window)
    order_var_1_input = Entry(
        window,
        bd=0,
        bg="#F3F3F3",
        highlightthickness=0,
        justify=CENTER,
        font = "Helvetica 12",
        textvariable=order_var_1
    )
    order_var_1_input.place(
        x=45.0,
        y=408.0,
        width=29.0,
        height=34.0
    )

    entry_image_5 = PhotoImage(
        file=relative_to_assets("entry_5.png"))
    entry_bg_5 = canvas.create_image(
        273.5,
        325.0,
        image=entry_image_5
    )
    limit_3_b = StringVar(window)
    limit_3_b_input = Entry(
        window,
        bd=0,
        bg="#F3F3F3",
        highlightthickness=0,
        justify=CENTER,
        font = "Helvetica 10",
        textvariable=limit_3_b
    )
    limit_3_b_input.insert(0, "B")
    limit_3_b_input.place(
        x=259.0,
        y=307.0,
        width=29.0,
        height=34.0
    )

    entry_image_6 = PhotoImage(
        file=relative_to_assets("entry_6.png"))
    entry_bg_6 = canvas.create_image(
        166.5,
        325.0,
        image=entry_image_6
    )
    limit_2_b = StringVar(window)
    limit_2_b_input = Entry(
        window,
        bd=0,
        bg="#F3F3F3",
        highlightthickness=0,
        justify=CENTER,
        font = "Helvetica 10",
        textvariable=limit_2_b
    )
    limit_2_b_input.insert(0, "B")
    limit_2_b_input.place(
        x=152.0,
        y=307.0,
        width=29.0,
        height=34.0
    )

    entry_image_7 = PhotoImage(
        file=relative_to_assets("entry_7.png"))
    entry_bg_7 = canvas.create_image(
        59.5,
        325.0,
        image=entry_image_7
    )
    limit_1_b = StringVar(window)
    limit_1_b_input = Entry(
        window,
        bd=0,
        bg="#F3F3F3",
        highlightthickness=0,
        justify=CENTER,
        font = "Helvetica 10",
        textvariable=limit_1_b
    )
    limit_1_b_input.insert(0, "B")
    limit_1_b_input.place(
        x=45.0,
        y=307.0,
        width=29.0,
        height=34.0
    )

    entry_image_8 = PhotoImage(
        file=relative_to_assets("entry_8.png"))
    entry_bg_8 = canvas.create_image(
        271.5,
        277.0,
        image=entry_image_8
    )
    limit_3_a = StringVar(window)
    limit_3_a_input = Entry(
        window,
        bd=0,
        bg="#F3F3F3",
        highlightthickness=0,
        justify=CENTER,
        font = "Helvetica 10",
        textvariable=limit_3_a
    )
    limit_3_a_input.insert(0, "A")
    limit_3_a_input.place(
        x=257.0,
        y=259.0,
        width=29.0,
        height=34.0
    )

    entry_image_9 = PhotoImage(
        file=relative_to_assets("entry_9.png"))
    entry_bg_9 = canvas.create_image(
        164.5,
        277.0,
        image=entry_image_9
    )
    limit_2_a = StringVar(window)
    limit_2_a_input = Entry(
        window,
        bd=0,
        bg="#F3F3F3",
        highlightthickness=0,
        justify=CENTER,
        font = "Helvetica 10",
        textvariable=limit_2_a
    )
    limit_2_a_input.insert(0, "A")
    limit_2_a_input.place(
        x=150.0,
        y=259.0,
        width=29.0,
        height=34.0
    )

    entry_image_10 = PhotoImage(
        file=relative_to_assets("entry_10.png"))
    entry_bg_10 = canvas.create_image(
        57.5,
        277.0,
        image=entry_image_10
    )
    limit_1_a = StringVar(window)
    limit_1_a_input = Entry(
        window,
        bd=0,
        bg="#F3F3F3",
        highlightthickness=0,
        justify=CENTER,
        font = "Helvetica 10",
        textvariable=limit_1_a
    )
    limit_1_a_input.insert(0, "A")
    limit_1_a_input.place(
        x=43.0,
        y=259.0,
        width=29.0,
        height=34.0
    )

    entry_image_11 = PhotoImage(
        file=relative_to_assets("entry_11.png"))
    entry_bg_11 = canvas.create_image(
        171.0,
        111.5,
        image=entry_image_11
    )
    function = StringVar(window)
    function_input = Entry(
        window,
        bd=0,
        bg="#F3F3F3",
        highlightthickness=0,
        justify=CENTER,
        font = "Helvetica 14 bold",
        textvariable=function
    )
    function_input.place(
        x=33.0,
        y=90.0,
        width=276.0,
        height=41.0
    )

    canvas.create_text(
        25.0,
        75.0,
        anchor="nw",
        text="Funci√≥n",
        fill="#2B18A4",
        font=("Verdana", 12 * -1)
    )

    canvas.create_text(
        25.0,
        150.0,
        anchor="nw",
        text="Tipo de integral",
        fill="#2B18A4",
        font=("Inter SemiBold", 12 * -1)
    )

    canvas.create_text(
        25.0,
        235.0,
        anchor="nw",
        text="Intervalos",
        fill="#2B18A4",
        font=("Inter SemiBold", 12 * -1)
    )

    canvas.create_text(
        25.0,
        372.0,
        anchor="nw",
        text="Orden de integracion (variables)",
        fill="#2B18A4",
        font=("Inter SemiBold", 12 * -1)
    )

    canvas.create_text(
        25.0,
        469.0,
        anchor="nw",
        text="Numero de nodos",
        fill="#2B18A4",
        font=("Inter SemiBold", 12 * -1)
    )

    def single_integration_button_clicked():
        limit_1_a_input.config(state='normal')
        limit_1_b_input.config(state='normal')
        order_var_1_input.config(state='normal')

        # Disabling unused entries
        limit_2_a_input.delete(0,END)
        limit_2_b_input.delete(0,END)
        limit_3_a_input.delete(0,END)
        limit_3_b_input.delete(0,END)
        limit_2_a_input.config(state='disabled')
        limit_2_b_input.config(state='disabled')
        limit_3_a_input.config(state='disabled')
        limit_3_b_input.config(state='disabled')

        # Disabling unused entries for variables
        order_var_2_input.delete(0,END)
        order_var_3_input.delete(0,END)
        order_var_2_input.config(state='disabled')
        order_var_3_input.config(state='disabled')
        



    def double_integration_button_clicked():
        limit_1_a_input.config(state='normal')
        limit_1_b_input.config(state='normal')
        limit_2_a_input.config(state='normal')
        limit_2_b_input.config(state='normal')
        order_var_1_input.config(state='normal')
        order_var_2_input.config(state='normal')

        limit_3_a_input.delete(0,END)
        limit_3_b_input.delete(0,END)
        limit_3_a_input.config(state='disabled')
        limit_3_b_input.config(state='disabled')

        order_var_3_input.delete(0,END)
        order_var_3_input.config(state='disabled')


    def triple_integration_button_clicked():
        limit_1_a_input.config(state='normal')
        limit_1_b_input.config(state='normal')
        limit_2_a_input.config(state='normal')
        limit_2_b_input.config(state='normal')
        limit_3_a_input.config(state='normal')
        limit_3_b_input.config(state='normal')
        order_var_1_input.config(state='normal')
        order_var_2_input.config(state='normal')
        order_var_3_input.config(state='normal')


    button_image_2 = PhotoImage(
        file=relative_to_assets("button_2.png"))
    # button_tripleI = Button(
    #     window,
    #     image=button_image_2,
    #     borderwidth=0,
    #     highlightthickness=0,
    #     command=lambda: print("Integral triple"),
    #     relief="flat"
    # )
    # button_tripleI.place(
    #     x=256.0,
    #     y=177.0,
    #     width=61.0,
    #     height=43.0
    # )

    option=IntVar()
    option.set(0)
    print("Initial option set to ", option.get())
    button_tripleI = Radiobutton(window, 
                text="Triple",
                variable=option,
                background="#EDF5FA", 
                value=3,
                font="Arial 10",
                command=triple_integration_button_clicked)

    button_tripleI.place(x=256.0,
        y=177.0,
        width=61.0,
        height=43.0
    )

    # button_image_3 = PhotoImage(
    #     file=relative_to_assets("button_3.png"))
    # button_dobleI = Button(
    #     window,
    #     image=button_image_3,
    #     borderwidth=0,
    #     highlightthickness=0,
    #     command=lambda: print("Integral doble"),
    #     relief="flat"
    # )
    button_dobleI = Radiobutton(window, 
                text="Doble",
                variable=option,
                background="#EDF5FA", 
                value=2,
                font="Arial 10",
                command=double_integration_button_clicked)
    button_dobleI.place(
        x=141.0,
        y=177.0,
        width=61.0,
        height=43.0
    )

    # button_image_4 = PhotoImage(
    #     file=relative_to_assets("button_4.png"))
    # button_singleI = Button(
    #     window,
    #     image=button_image_4,
    #     borderwidth=0,
    #     highlightthickness=0,
    #     command=lambda: print("Integral simple"),
    #     relief="flat"
    # )
    button_singleI = Radiobutton(window, 
                text="Simple",
                variable=option,
                background="#EDF5FA", 
                value=1,
                font="Arial 10",
                command=single_integration_button_clicked)
    button_singleI.place(
        x=35.0,
        y=177.0,
        width=61.0,
        height=43.0
    )

    def integral_simple(function, f_simp):
        a = float(limit_1_a.get())
        b = float(limit_1_b.get())

        if len(order_var_1.get()) == 0:
            raise Exception("No se ha ingresado el la variable a integrar de la integral simple")
        

        variables = [order_var_1.get()]
        symbols = [sp.Symbol(symb) for symb in variables]

        limits = np.array([[a, b]])

        nodes = int(nodes_value.get())

        result, table = quadIntegrate(symbols, limits, f_simp, nodes)
        messagebox.showinfo("Resultado", "El resultado de la integral es: " + str(result))
        return result, nodes, limits, variables, table

    def integral_double(function, f_simp):
        a1 = float(limit_1_a.get())
        b1 = float(limit_1_b.get())
        a2 = float(limit_2_a.get())
        b2 = float(limit_2_b.get())

        if len(order_var_1.get()) == 0 or len(order_var_2.get()) == 0:
            raise Exception("No se ha ingresado las variables para la integral doble")
        variables = [order_var_1.get(), order_var_2.get()]
        symbols = [sp.Symbol(symb) for symb in variables]
        limits = np.array([[a1, b1], [a2, b2]])
        nodes = int(nodes_value.get())

        result, table = quadIntegrate(symbols, limits, f_simp, nodes)
        messagebox.showinfo("Resultado", "El resultado de la integral es: " + str(result))
        return result, nodes, limits, variables, table

    def integral_triple(function, f_simp):
        a1 = float(limit_1_a.get())
        b1 = float(limit_1_b.get())
        a2 = float(limit_2_a.get())
        b2 = float(limit_2_b.get())
        a3 = float(limit_3_a.get())
        b3 = float(limit_3_b.get())

        if len(order_var_1.get()) == 0 or len(order_var_2.get()) == 0 or len(order_var_3.get()) == 0:
            raise Exception("No se ha ingresado las variables para la integral triple")

        variables = [order_var_1.get(), order_var_2.get(), order_var_3.get()]
        symbols = [sp.Symbol(symbol) for symbol in variables]

        limits = np.array([[a1, b1], [a2, b2], [a3, b3]])
        nodes = int(nodes_value.get())

        result, table = quadIntegrate(symbols, limits, f_simp, nodes)
        messagebox.showinfo("Resultado", "El resultado de la integral es: " + str(result))
        return result, nodes, limits, variables, table

    def calculate_button_clicked():
        
        if len(function_input.get()) == 0:
            messagebox.showerror("Error: campos vacios", "Ingrese una funci√≥n")
            return

        if len(nodes_value.get()) == 0:
            messagebox.showerror("Error: campos vacios", "Ingrese un numero de nodos")
            return

        function = function_input.get()
        f_simp = sp.sympify(function)

        result = 0
        nodes = 0 
        limits = []
        variables = []
        table = {}

        try:
            if option.get() == 1:
                result, nodes, limits, variables, table = integral_simple(function, f_simp)
            elif option.get() == 2:
                result, nodes, limits, variables, table = integral_double(function, f_simp)
            elif option.get() == 3:
                result, nodes, limits, variables, table =  integral_triple(function, f_simp)
            else:
                messagebox.showerror("Tipo de integral no definido", "Seleccione el tipo de integral")
                return
            generate_pdf(function, variables, limits, nodes, result, option.get(), table)
        except ValueError as e:
            messagebox.showerror("Error: campos vacios", "Error al calcular la integral, por favor revise si todos los limites estan ingresados")
            return
        except Exception as e:
            messagebox.showerror("Error", e)
            return

    button_image_1 = PhotoImage(
        file=relative_to_assets("button_1.png"))
    calculate_button = Button(
        window,
        image=button_image_1,
        borderwidth=0,
        highlightthickness=0,
        command=calculate_button_clicked,
        relief="flat"
    )
    calculate_button.place(
        x=38.0,
        y=553.0,
        width=272.0,
        height=43.0
    )

    window.resizable(False, False)
    window.mainloop()
